#!/bin/sh
#
# Calculate cumulative distribution function for attributes of
# non-finder-patterns. The plan is to use this to determine a confidence
# level when identifying finder patterns.
#
# usage: cumulate files..
#
# The files should have Y/N in first column (N == not a finder pattern)
# and some metrics over [0, 1] in the other columns. We're going to
# output 11 values for each column for <= 0.0, < 0.1, < 0.2, etc.
#
awk '
    BEGIN {
        name[2] = "g_smallodd"
        name[3] = "g_symmetric"
        name[4] = "g_likeprev"
        name[5] = "g_multipart"
    }
    function calculate(col,     sum, i, mean) {
        if(col == 1)
            # Column 1 contains the Yes/No labels
            return
        sum = 0
        split("", bins)
        for(i = 1; i <= counts[col]; i++) {
            if(data[col, i] <= 0.0)
                bins[0]++
            else if(data[col, i] < 0.1)
                bins[1]++
            else if(data[col, i] < 0.2)
                bins[2]++
            else if(data[col, i] < 0.3)
                bins[2]++
            else if(data[col, i] < 0.4)
                bins[4]++
            else if(data[col, i] < 0.5)
                bins[5]++
            else if(data[col, i] < 0.6)
                bins[6]++
            else if(data[col, i] < 0.7)
                bins[7]++
            else if(data[col, i] < 0.8)
                bins[8]++
            else if(data[col, i] < 0.9)
                bins[9]++
            else if(data[col, i] < 1.0)
                bins[10]++
            sum += data[col, i]
        }
        mean = sum / counts[col]
        sum = 0
        for(i = 1; i <= counts[col]; i++)
            sum += (data[col, i] - mean) * (data[col, i] - mean)
        variance = sum / (counts[col] - 1)
        stddev = sqrt(variance)
        sum = 0
        for(i = 0; i <= 10; i++) {
            sum += bins[i]
            bins[i] = sum
        }
        printf "static double %s[] = {\n    ", name[col]
        for(i = 0; i <= 10; i++) {
            printf " %f%s", bins[i] / counts[col], (i < 10 ? "," : "")
            if(i % 5 == 4) printf "\n    "
        }
        printf "\n};\n"
        printf "static double %s_s = %f;\n", name[col], stddev
    }

    BEGIN { split("", data); split("", counts) }

    /^[ \t]*#/ { next }

    /^[Nn]/ { for(i = 1; i <= NF; i++) data[i,++counts[i]] = $i; }

    END {
        cols = 0
        for(i in counts) if(i > cols) cols = i;
        for(i = 1; i <= cols; i++)
            calculate(i)
    }
' "$@"
